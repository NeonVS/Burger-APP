{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\nconst INGREDIENT_PRICES = {\n  salad: 10,\n  cheese: 15,\n  meat: 25,\n  bacon: 18\n};\nconst initialState = {\n  ingredients: null,\n  totalPrice: 40,\n  error: false,\n  building: false\n};\n\nconst addIngredient = (state, action) => {\n  const updatedIngredient = {\n    [action.ingredientName]: state.ingredients[action.ingredientName] + 1\n  };\n  const updatedIngredients = updateObject(state.ingredients, updatedIngredient);\n  const updatedState = {\n    ingredients: updatedIngredients,\n    totalPrice: state.totalPrice + INGREDIENT_PRICES[action.ingredientName]\n  };\n  return updateObject(state, updatedState);\n};\n\nconst removeIngredient = (state, action) => {\n  return { ...state,\n    ingredients: { ...state.ingredients,\n      [action.ingredientName]: state.ingredients[action.ingredientName] - 1\n    },\n    totalPrice: state.totalPrice - INGREDIENT_PRICES[action.ingredientName]\n  };\n};\n\nconst setIngredient = (state, action) => {\n  return updateObject(state, {\n    ingredients: {\n      salad: action.ingredients.salad,\n      bacon: action.ingredients.bacon,\n      cheese: action.ingredients.cheese,\n      meat: action.ingredients.meat\n    },\n    totalPrice: 40,\n    error: false\n  });\n};\n\nconst fetchIngredientFailed = (state, action) => {\n  return updateObject(state, {\n    error: true\n  });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_INGREDIENT:\n      return addIngredient(state, action);\n\n    case actionTypes.REMOVE_INGREDIENT:\n      return removeIngredient(state, action);\n\n    case actionTypes.SET_INGREDIENTS:\n      return setIngredient(state, action);\n\n    case actionTypes.FETCH_INGREDIENTS_FAILED:\n      return fetchIngredientFailed(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/Web Development Projects/burger_app/src/store/reducers/burgerBuilder.js"],"names":["actionTypes","updateObject","INGREDIENT_PRICES","salad","cheese","meat","bacon","initialState","ingredients","totalPrice","error","building","addIngredient","state","action","updatedIngredient","ingredientName","updatedIngredients","updatedState","removeIngredient","setIngredient","fetchIngredientFailed","reducer","type","ADD_INGREDIENT","REMOVE_INGREDIENT","SET_INGREDIENTS","FETCH_INGREDIENTS_FAILED"],"mappings":"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","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../utility';\r\n\r\nconst INGREDIENT_PRICES={\r\n    salad:10,\r\n    cheese:15,\r\n    meat:25,\r\n    bacon:18\r\n};\r\n\r\nconst initialState={\r\n    ingredients:null,\r\n    totalPrice:40,\r\n    error:false,\r\n    building:false\r\n};\r\n\r\nconst addIngredient = (state,action) =>{\r\n    const updatedIngredient = {[action.ingredientName]:state.ingredients[action.ingredientName]+1};\r\n            const updatedIngredients = updateObject(state.ingredients,updatedIngredient);\r\n            const updatedState = {\r\n                ingredients:updatedIngredients,\r\n                totalPrice:state.totalPrice + INGREDIENT_PRICES[action.ingredientName]\r\n            }\r\n            return updateObject(state,updatedState);\r\n}\r\nconst removeIngredient = (state,action) =>{\r\n    return {\r\n        ...state,\r\n        ingredients:{\r\n            ...state.ingredients,\r\n            [action.ingredientName]:state.ingredients[action.ingredientName]-1\r\n        },\r\n        totalPrice:state.totalPrice - INGREDIENT_PRICES[action.ingredientName]\r\n    };\r\n}\r\nconst setIngredient = (state,action) =>{\r\n    return updateObject (state,{\r\n        ingredients:{\r\n            salad:action.ingredients.salad,\r\n            bacon:action.ingredients.bacon,\r\n            cheese:action.ingredients.cheese,\r\n            meat:action.ingredients.meat,\r\n        },\r\n        totalPrice:40,\r\n        error:false\r\n    });\r\n}\r\nconst fetchIngredientFailed = (state,action) =>{\r\n    return updateObject(state,{error:true});\r\n}\r\n\r\nconst reducer = (state=initialState,action) =>{\r\n    switch(action.type){\r\n        case actionTypes.ADD_INGREDIENT:\r\n            return addIngredient(state,action);\r\n        case actionTypes.REMOVE_INGREDIENT:\r\n            return removeIngredient(state,action);\r\n        case actionTypes.SET_INGREDIENTS:\r\n            return setIngredient(state,action);\r\n        case actionTypes.FETCH_INGREDIENTS_FAILED:\r\n            return fetchIngredientFailed(state,action);\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}