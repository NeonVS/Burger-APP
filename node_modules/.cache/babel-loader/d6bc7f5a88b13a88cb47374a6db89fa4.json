{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from '../../axios-order';\nexport const purchaseBurgerSuccess = (id, orderData) => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_SUCCESS,\n    orderId: id,\n    orderData: orderData\n  };\n};\nexport const purchaseBurgerFail = error => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_FAIL,\n    error: error\n  };\n};\nexport const purchaseBurgerStart = () => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_START\n  };\n};\nexport const purchaseBurger = orderData => {\n  return dispatch => {\n    dispatch(purchaseBurgerStart());\n    axios.post('/orders.json', orderData).then(response => {\n      dispatch(purchaseBurgerSuccess(response.data.name, orderData));\n    }).catch(error => {\n      dispatch(purchaseBurgerFail(error));\n    });\n  };\n};\nexport const purchaseInit = () => {\n  return {\n    type: actionTypes.PURCHASE_INIT\n  };\n};\nexport const fetchOrderSuccess = orders => {\n  return {\n    type: actionTypes.FETCH_ORDERS_SUCCESS,\n    orders: orders\n  };\n};\nexport const fetchOrdersFail = error => {\n  return {\n    type: actionTypes.FETCH_ORDERS_FAIL,\n    error: error\n  };\n};\nexport const fetchOrdersStart = () => {\n  return {\n    type: actionTypes.FETCH_ORDERS_START\n  };\n};\nexport const fetchOrders = () => {\n  return dispatch => {\n    dispatch(fetchOrdersStart());\n    axios.get('/orders.json').then(res => {\n      const fetchedOrders = [];\n\n      for (let key in res.data) {\n        fetchedOrders.push({ ...res.data[key],\n          id: key\n        });\n      }\n\n      dispatch(fetchOrderSuccess(fetchedOrders));\n    }).catch(err => {\n      dispatch(fetchOrdersFail(err));\n    });\n  };\n};","map":{"version":3,"sources":["D:/Web Development Projects/burger_app/src/store/actions/order.js"],"names":["actionTypes","axios","purchaseBurgerSuccess","id","orderData","type","PURCHASE_BURGER_SUCCESS","orderId","purchaseBurgerFail","error","PURCHASE_BURGER_FAIL","purchaseBurgerStart","PURCHASE_BURGER_START","purchaseBurger","dispatch","post","then","response","data","name","catch","purchaseInit","PURCHASE_INIT","fetchOrderSuccess","orders","FETCH_ORDERS_SUCCESS","fetchOrdersFail","FETCH_ORDERS_FAIL","fetchOrdersStart","FETCH_ORDERS_START","fetchOrders","get","res","fetchedOrders","key","push","err"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AAEA,OAAO,MAAMC,qBAAqB,GAAG,CAACC,EAAD,EAAIC,SAAJ,KAAiB;AAClD,SAAO;AACHC,IAAAA,IAAI,EAACL,WAAW,CAACM,uBADd;AAEHC,IAAAA,OAAO,EAACJ,EAFL;AAGHC,IAAAA,SAAS,EAACA;AAHP,GAAP;AAKH,CANM;AAQP,OAAO,MAAMI,kBAAkB,GAAIC,KAAD,IAAU;AACxC,SAAO;AACHJ,IAAAA,IAAI,EAACL,WAAW,CAACU,oBADd;AAEHD,IAAAA,KAAK,EAACA;AAFH,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,mBAAmB,GAAG,MAAK;AACpC,SAAO;AACHN,IAAAA,IAAI,EAACL,WAAW,CAACY;AADd,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,cAAc,GAAIT,SAAD,IAAc;AACxC,SAAQU,QAAD,IAAa;AAChBA,IAAAA,QAAQ,CAACH,mBAAmB,EAApB,CAAR;AACAV,IAAAA,KAAK,CAACc,IAAN,CAAW,cAAX,EAA0BX,SAA1B,EACCY,IADD,CACMC,QAAQ,IAAE;AACZH,MAAAA,QAAQ,CAACZ,qBAAqB,CAACe,QAAQ,CAACC,IAAT,CAAcC,IAAf,EAAoBf,SAApB,CAAtB,CAAR;AACH,KAHD,EAICgB,KAJD,CAIOX,KAAK,IAAE;AACVK,MAAAA,QAAQ,CAACN,kBAAkB,CAACC,KAAD,CAAnB,CAAR;AACH,KAND;AAOH,GATD;AAUH,CAXM;AAaP,OAAO,MAAMY,YAAY,GAAG,MAAK;AAC7B,SAAO;AACHhB,IAAAA,IAAI,EAACL,WAAW,CAACsB;AADd,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,iBAAiB,GAAIC,MAAD,IAAU;AACvC,SAAO;AACHnB,IAAAA,IAAI,EAACL,WAAW,CAACyB,oBADd;AAEHD,IAAAA,MAAM,EAACA;AAFJ,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,eAAe,GAAIjB,KAAD,IAAU;AACrC,SAAO;AACHJ,IAAAA,IAAI,EAACL,WAAW,CAAC2B,iBADd;AAEHlB,IAAAA,KAAK,EAACA;AAFH,GAAP;AAIH,CALM;AAOP,OAAO,MAAMmB,gBAAgB,GAAG,MAAK;AACjC,SAAO;AACHvB,IAAAA,IAAI,EAACL,WAAW,CAAC6B;AADd,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,WAAW,GAAG,MAAK;AAC5B,SAAOhB,QAAQ,IAAG;AACdA,IAAAA,QAAQ,CAACc,gBAAgB,EAAjB,CAAR;AACA3B,IAAAA,KAAK,CAAC8B,GAAN,CAAU,cAAV,EACCf,IADD,CACMgB,GAAG,IAAE;AACP,YAAMC,aAAa,GAAG,EAAtB;;AACA,WAAI,IAAIC,GAAR,IAAeF,GAAG,CAACd,IAAnB,EAAwB;AACpBe,QAAAA,aAAa,CAACE,IAAd,CAAmB,EAAC,GAAGH,GAAG,CAACd,IAAJ,CAASgB,GAAT,CAAJ;AAAkB/B,UAAAA,EAAE,EAAC+B;AAArB,SAAnB;AACH;;AACDpB,MAAAA,QAAQ,CAACS,iBAAiB,CAACU,aAAD,CAAlB,CAAR;AACH,KAPD,EAQCb,KARD,CAQOgB,GAAG,IAAG;AACTtB,MAAAA,QAAQ,CAACY,eAAe,CAACU,GAAD,CAAhB,CAAR;AACH,KAVD;AAWH,GAbD;AAcH,CAfM","sourcesContent":["import * as actionTypes from './actionTypes';\r\nimport axios from '../../axios-order';\r\n\r\nexport const purchaseBurgerSuccess = (id,orderData) =>{\r\n    return {\r\n        type:actionTypes.PURCHASE_BURGER_SUCCESS,\r\n        orderId:id,\r\n        orderData:orderData\r\n    };\r\n};\r\n\r\nexport const purchaseBurgerFail = (error) =>{\r\n    return {\r\n        type:actionTypes.PURCHASE_BURGER_FAIL,\r\n        error:error\r\n    };\r\n};\r\n\r\nexport const purchaseBurgerStart = () =>{\r\n    return {\r\n        type:actionTypes.PURCHASE_BURGER_START\r\n    }\r\n};\r\n\r\nexport const purchaseBurger = (orderData) =>{\r\n    return (dispatch) =>{\r\n        dispatch(purchaseBurgerStart());\r\n        axios.post('/orders.json',orderData)\r\n        .then(response=>{\r\n            dispatch(purchaseBurgerSuccess(response.data.name,orderData));\r\n        })\r\n        .catch(error=>{\r\n            dispatch(purchaseBurgerFail(error));\r\n        }); \r\n    };\r\n};\r\n\r\nexport const purchaseInit = () =>{\r\n    return {\r\n        type:actionTypes.PURCHASE_INIT\r\n    };\r\n};\r\n\r\nexport const fetchOrderSuccess = (orders)=>{\r\n    return {\r\n        type:actionTypes.FETCH_ORDERS_SUCCESS,\r\n        orders:orders\r\n    }\r\n};\r\n\r\nexport const fetchOrdersFail = (error) =>{\r\n    return {\r\n        type:actionTypes.FETCH_ORDERS_FAIL,\r\n        error:error\r\n    };\r\n};\r\n\r\nexport const fetchOrdersStart = () =>{\r\n    return {\r\n        type:actionTypes.FETCH_ORDERS_START\r\n    }\r\n}\r\n\r\nexport const fetchOrders = () =>{\r\n    return dispatch =>{\r\n        dispatch(fetchOrdersStart());\r\n        axios.get('/orders.json')\r\n        .then(res=>{\r\n            const fetchedOrders = [];\r\n            for(let key in res.data){\r\n                fetchedOrders.push({...res.data[key],id:key});\r\n            }\r\n            dispatch(fetchOrderSuccess(fetchedOrders));\r\n        })\r\n        .catch(err =>{\r\n            dispatch(fetchOrdersFail(err));\r\n        });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}