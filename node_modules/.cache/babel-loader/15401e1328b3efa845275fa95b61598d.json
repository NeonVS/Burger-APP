{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Development Projects\\\\burger_app\\\\src\\\\containers\\\\Orders\\\\Orders.js\";\nimport React, { Component } from 'react';\nimport Order from '../../components/Order/Order';\nimport axios from '../../axios-order';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nclass Orders extends Component {\n  componentDidMount() {\n    this.props.onFetchOrders();\n  }\n\n  render() {\n    let orders = /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 22\n      }\n    });\n\n    if (!this.props.loading) {\n      console.log(orders);\n      orders = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 17\n        }\n      }, this.props.orders.map(order => /*#__PURE__*/React.createElement(Order, {\n        key: order.id,\n        ingredients: order.ingredients,\n        price: order.price,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 21\n        }\n      })));\n    }\n\n    return orders;\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    orders: state.order.orders,\n    loading: state.order.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchOrders: () => dispatch(actions.fetchOrders())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));","map":{"version":3,"sources":["D:/Web Development Projects/burger_app/src/containers/Orders/Orders.js"],"names":["React","Component","Order","axios","withErrorHandler","actions","connect","Spinner","Orders","componentDidMount","props","onFetchOrders","render","orders","loading","console","log","map","order","id","ingredients","price","mapStateToProps","state","mapDispatchToProps","dispatch","fetchOrders"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,gBAAP,MAA4B,6CAA5B;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,qCAApB;;AACA,MAAMC,MAAN,SAAqBP,SAArB,CAA8B;AAE1BQ,EAAAA,iBAAiB,GAAE;AACf,SAAKC,KAAL,CAAWC,aAAX;AACH;;AAEDC,EAAAA,MAAM,GAAE;AACJ,QAAIC,MAAM,gBAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAb;;AACA,QAAG,CAAC,KAAKH,KAAL,CAAWI,OAAf,EAAuB;AACnBC,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACAA,MAAAA,MAAM,gBACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,KAAKH,KAAL,CAAWG,MAAX,CAAkBI,GAAlB,CAAsBC,KAAK,iBACxB,oBAAC,KAAD;AACA,QAAA,GAAG,EAAEA,KAAK,CAACC,EADX;AAEA,QAAA,WAAW,EAAED,KAAK,CAACE,WAFnB;AAGA,QAAA,KAAK,EAAEF,KAAK,CAACG,KAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH,CADD,CADJ;AAWH;;AACD,WACIR,MADJ;AAGH;;AAzByB;;AA4B9B,MAAMS,eAAe,GAAGC,KAAK,IAAG;AAC5B,SAAO;AACHV,IAAAA,MAAM,EAACU,KAAK,CAACL,KAAN,CAAYL,MADhB;AAEHC,IAAAA,OAAO,EAACS,KAAK,CAACL,KAAN,CAAYJ;AAFjB,GAAP;AAIH,CALD;;AAOA,MAAMU,kBAAkB,GAAGC,QAAQ,IAAG;AAClC,SAAO;AACHd,IAAAA,aAAa,EAAE,MAAKc,QAAQ,CAACpB,OAAO,CAACqB,WAAR,EAAD;AADzB,GAAP;AAGH,CAJD;;AAMA,eAAepB,OAAO,CAACgB,eAAD,EAAiBE,kBAAjB,CAAP,CAA4CpB,gBAAgB,CAACI,MAAD,EAAQL,KAAR,CAA5D,CAAf","sourcesContent":["import React , {Component} from 'react';\r\nimport Order from '../../components/Order/Order';\r\nimport axios from '../../axios-order';\r\nimport withErrorHandler from'../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../store/actions/index';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nclass Orders extends Component{\r\n\r\n    componentDidMount(){\r\n        this.props.onFetchOrders();\r\n    }\r\n\r\n    render(){\r\n        let orders = <Spinner />;\r\n        if(!this.props.loading){\r\n            console.log(orders);\r\n            orders = (\r\n                <div>\r\n                {this.props.orders.map(order =>(\r\n                    <Order \r\n                    key={order.id} \r\n                    ingredients={order.ingredients}\r\n                    price={order.price}/>\r\n                ))\r\n                }\r\n            </div>\r\n            );\r\n        }\r\n        return(\r\n            orders\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        orders:state.order.orders,\r\n        loading:state.order.loading\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n    return {\r\n        onFetchOrders: () =>dispatch(actions.fetchOrders())\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(Orders,axios));"]},"metadata":{},"sourceType":"module"}