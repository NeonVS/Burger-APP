{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Development Projects\\\\burger_app\\\\src\\\\containers\\\\Auth\\\\Auth.js\";\nimport React, { Component } from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.module.css';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport * as actions from '../../store/actions/index';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your Mail'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignup: true\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = { ...this.state.controls,\n        [controlName]: { ...this.state.controls[controlName],\n          value: event.target.value,\n          valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        }\n      };\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignup: !prevState.isSignup\n        };\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      if (isValid) isValid = value.trim() !== '';\n    }\n\n    if (rules.minLength) {\n      if (isValid) isValid = value.length >= rules.minLength;\n    }\n\n    if (rules.maxLength) {\n      if (isValid) isValid = value.length <= rules.maxLength;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementArray = [];\n\n    for (let key in this.state.controls) {\n      formElementArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      shouldValidate: formElement.configvalidation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      invalid: !formElement.config.valid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }));\n\n    if (this.props.loading) {\n      form = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 18\n        }\n      });\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }\n      }, this.props.error.message);\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Auth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }, errorMessage, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }\n    }, form, /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }\n    }, \"SUBMIT\")), /*#__PURE__*/React.createElement(Button, {\n      clicked: this.switchAuthModeHandler,\n      btnType: \"Danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }\n    }, \"SWITCH TO \", this.state.isSignup ? 'SIGNIN' : 'SIGNUP'));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token != null\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["D:/Web Development Projects/burger_app/src/containers/Auth/Auth.js"],"names":["React","Component","Input","Button","classes","Spinner","actions","Redirect","connect","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","rules","isValid","trim","length","maxLength","render","formElementArray","key","push","id","config","form","map","formElement","configvalidation","loading","errorMessage","error","message","mapStateToProps","auth","isAuthenticated","token","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport classes from './Auth.module.css';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport * as actions from '../../store/actions/index';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nclass Auth extends Component {\r\n    state = {\r\n        controls:{\r\n            email:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'email',\r\n                    placeholder:'Your Mail'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true,\r\n                    isEmail:true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            password:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'password',\r\n                    placeholder:'Password'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true,\r\n                    minLength:6\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            }\r\n        },\r\n        isSignup:true\r\n    }\r\n    checkValidity(value,rules){\r\n        let isValid = true;\r\n        if(!rules){\r\n            return true;\r\n        }\r\n        if(rules.required){\r\n            if(isValid)\r\n                isValid = value.trim() !== '';\r\n        }\r\n        if(rules.minLength){\r\n            if(isValid)\r\n                isValid = value.length >= rules.minLength;\r\n        }\r\n        if(rules.maxLength){\r\n            if(isValid)\r\n                isValid = value.length <= rules.maxLength;\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    inputChangedHandler = (event,controlName) =>{\r\n        const updatedControls = {\r\n            ...this.state.controls,\r\n            [controlName]: {\r\n                ...this.state.controls[controlName],\r\n                value:event.target.value,\r\n                valid:this.checkValidity(event.target.value,this.state.controls[controlName].validation),\r\n                touched:true\r\n            }\r\n        };\r\n        this.setState({controls:updatedControls});\r\n    }\r\n\r\n    submitHandler = (event)=>{\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value,this.state.controls.password.value,this.state.isSignup)\r\n    }\r\n\r\n    switchAuthModeHandler = () =>{\r\n        this.setState(prevState =>{\r\n            return {isSignup: !prevState.isSignup};\r\n        });\r\n    }\r\n\r\n    render(){\r\n        const formElementArray = [];\r\n        for(let key in this.state.controls){\r\n            formElementArray.push({\r\n                id:key,\r\n                config:this.state.controls[key]\r\n            });\r\n        }\r\n        let form = formElementArray.map(formElement => (\r\n            <Input  \r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value} \r\n                shouldValidate={formElement.configvalidation}\r\n                touched={formElement.config.touched}\r\n                changed={(event)=>this.inputChangedHandler(event,formElement.id)}\r\n                invalid={!formElement.config.valid}/>\r\n        ));\r\n        if(this.props.loading){\r\n            form=<Spinner />;\r\n        }\r\n\r\n        let errorMessage = null;\r\n        if(this.props.error){\r\n            errorMessage=(\r\n                <p>{this.props.error.message}</p>\r\n            );\r\n        }\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n                <Button clicked={this.switchAuthModeHandler} btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGNIN':'SIGNUP'}</Button>\r\n            </div>\r\n        );\r\n    };\r\n}\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        loading:state.auth.loading,\r\n        error:state.auth.error,\r\n        isAuthenticated :state.auth.token !=null\r\n    }\r\n};\r\nconst mapDispatchToProps = dispatch =>{\r\n    return {\r\n        onAuth:(email,password,isSignup)=>dispatch(actions.auth(email,password,isSignup))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth);"]},"metadata":{},"sourceType":"module"}