{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Development Projects\\\\burger_app\\\\src\\\\containers\\\\Checkout\\\\ContactData\\\\ContactData.js\";\nimport React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-order';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'ZIP CODE'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6,\n            maxLength: 6\n          },\n          valid: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your E-Mail'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false\n        }\n      }\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      this.setState({\n        loading: true\n      });\n      const order = {\n        ingredients: this.props.ingredients,\n        price: this.props.price,\n        customer: {\n          name: 'Vishu Saxena',\n          address: {\n            street: 'Street -1 New Bay',\n            zipcode: '564646',\n            country: 'INDIA'\n          },\n          email: 'vishu@gmail.com',\n          deliveryMethod: 'fastest'\n        }\n      };\n      console.log(order);\n      axios.post('/orders.json', order).then(response => {\n        console.log(response);\n        this.setState({\n          loading: false\n        });\n        this.props.history.push('/');\n      }).catch(err => {\n        this.setState({\n          loading: false\n        });\n        console.log(err);\n      });\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedOrderForm = { ...this.state.orderForm\n      };\n      const updatedFormElement = { ...updatedOrderForm[inputIdentifier]\n      };\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      this.setState({\n        orderForm: updatedOrderForm\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = false;\n\n    if (rules.required) {\n      isValid = value.trim() !== '';\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }\n    }, formElementArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Success\",\n      clicked: this.orderHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }\n    }, \"ORDER\"));\n\n    if (this.state.loading) {\n      form = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 19\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.ContactData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }\n    }, \"Enter your Contact Data\"), form);\n  }\n\n}\n\nexport default ContactData;","map":{"version":3,"sources":["D:/Web Development Projects/burger_app/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","Button","classes","axios","Spinner","Input","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","orderHandler","event","preventDefault","setState","loading","order","ingredients","props","price","customer","address","zipcode","console","log","post","then","response","history","push","catch","err","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","rules","isValid","trim","length","render","formElementArray","key","id","config","form","map","formElement"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport classes from './ContactData.module.css';\r\nimport axios from '../../../axios-order';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nclass ContactData extends Component{\r\n    state={\r\n        orderForm:{\r\n            name:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'Your Name'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true\r\n                },\r\n                valid:false\r\n            },\r\n            street:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'Street'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true\r\n                },\r\n                valid:false\r\n            },\r\n            zipCode:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'ZIP CODE'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true,\r\n                    minLength:6,\r\n                    maxLength:6\r\n                },\r\n                valid:false\r\n            },\r\n            country:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'Country'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true\r\n                },\r\n                valid:false\r\n            },\r\n            email:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'email',\r\n                    placeholder:'Your E-Mail'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true\r\n                },\r\n                valid:false\r\n            },\r\n            deliveryMethod:{\r\n                elementType:'select',\r\n                elementConfig:{\r\n                    options:[\r\n                        {value:'fastest',displayValue:'Fastest'},\r\n                        {value:'cheapest',displayValue:'Cheapest'},]\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true\r\n                },\r\n                valid:false\r\n            }\r\n        }\r\n    }\r\n    orderHandler = (event)=>{\r\n        event.preventDefault();\r\n        this.setState({loading:true});\r\n        const order ={\r\n            ingredients:this.props.ingredients,\r\n            price:this.props.price,\r\n            customer:{\r\n                name:'Vishu Saxena',\r\n                address:{\r\n                    street:'Street -1 New Bay',\r\n                    zipcode:'564646',\r\n                    country:'INDIA'\r\n                },\r\n            email:'vishu@gmail.com',\r\n            deliveryMethod:'fastest'\r\n            }\r\n        };\r\n        console.log(order);\r\n        axios.post('/orders.json',order)\r\n        .then(response=>{\r\n            console.log(response);\r\n            this.setState({loading:false});\r\n            this.props.history.push('/');\r\n        })\r\n        .catch(err=>{\r\n            this.setState({loading:false});\r\n            console.log(err);\r\n        });  \r\n    }\r\n\r\n    checkValidity(value,rules){\r\n        let isValid = false;\r\n        if(rules.required){\r\n            isValid = value.trim() !== '';\r\n        }\r\n        if(rules.minLength){\r\n            isValid = value.length >= rules.minLength;\r\n        }\r\n        if(rules.maxLength){\r\n            isValid = value.length <= rules.maxLength;\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    inputChangedHandler = (event,inputIdentifier)=>{\r\n         const updatedOrderForm = {\r\n             ...this.state.orderForm\r\n         }\r\n         const updatedFormElement = {...updatedOrderForm[inputIdentifier]};\r\n         updatedFormElement.value = event.target.value;\r\n         updatedFormElement.valid = this.checkValidity(updatedFormElement.value,updatedFormElement.validation);\r\n         updatedOrderForm[inputIdentifier] = updatedFormElement;\r\n         this.setState({orderForm:updatedOrderForm});\r\n    }\r\n\r\n    render(){\r\n        const formElementArray = [];\r\n        for(let key in this.state.orderForm){\r\n            formElementArray.push({\r\n                id:key,\r\n                config:this.state.orderForm[key]\r\n            });\r\n        }\r\n        let form = (\r\n        <form>\r\n            {formElementArray.map(formElement =>(\r\n                <Input \r\n                    key={formElement.id}\r\n                    elementType={formElement.config.elementType}\r\n                    elementConfig={formElement.config.elementConfig}\r\n                    value={formElement.config.value} \r\n                    changed={(event)=>this.inputChangedHandler(event,formElement.id)}/>\r\n            ))}\r\n            <Button btnType=\"Success\" clicked={this.orderHandler}>ORDER</Button>\r\n        </form>\r\n        );\r\n        if(this.state.loading){\r\n            form =<Spinner />\r\n        }\r\n        return(\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    };\r\n}   \r\n\r\nexport default ContactData;"]},"metadata":{},"sourceType":"module"}