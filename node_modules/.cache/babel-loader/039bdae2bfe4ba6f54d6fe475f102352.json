{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (token, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken: token,\n    userId: userId\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, +expirationTime * 1000);\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expirationDate');\n  localStorage.removeItem('userId');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const setAuthRedirectPath = path => {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path: path\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate > new Date()) {\n        dispatch(authSuccess(token));\n      } else {\n        dispatch(logout());\n      }\n    }\n  };\n};\nexport const auth = (email, password, isSignup) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyB82NNpMRmyiLHdvtZMp5IeuzpwZHibc9w';\n\n    if (!isSignup) {\n      url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyB82NNpMRmyiLHdvtZMp5IeuzpwZHibc9w';\n    }\n\n    axios.post(url, authData).then(response => {\n      console.log(response.data);\n      const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n      localStorage.setItem('token', response.data.idToken);\n      localStorage.setItem('expirationDate', expirationDate);\n      localStorage.setItem('userId', response.data.localId);\n      dispatch(authSuccess(response.data.idToken, response.data.localId));\n      dispatch(checkAuthTimeout(response.data.expiresIn));\n    }).catch(err => dispatch(authFail(err.response.data.error)));\n  };\n};","map":{"version":3,"sources":["D:/Web Development Projects/burger_app/src/store/actions/auth.js"],"names":["actionTypes","axios","authStart","type","AUTH_START","authSuccess","token","userId","AUTH_SUCCESS","idToken","authFail","error","AUTH_FAIL","checkAuthTimeout","expirationTime","dispatch","setTimeout","logout","localStorage","removeItem","AUTH_LOGOUT","setAuthRedirectPath","path","SET_AUTH_REDIRECT_PATH","authCheckState","getItem","expirationDate","Date","auth","email","password","isSignup","authData","returnSecureToken","url","post","then","response","console","log","data","getTime","expiresIn","setItem","localId","catch","err"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\r\nimport axios from 'axios';\r\n\r\nexport const authStart = () =>{\r\n    return {\r\n        type:actionTypes.AUTH_START\r\n    };\r\n};\r\n\r\nexport const authSuccess = (token,userId) =>{\r\n    return {\r\n        type:actionTypes.AUTH_SUCCESS,\r\n        idToken:token,\r\n        userId:userId\r\n    };\r\n};\r\n\r\nexport const authFail = (error) =>{\r\n    return {\r\n        type:actionTypes.AUTH_FAIL,\r\n        error:error\r\n    };\r\n};\r\n\r\nexport const checkAuthTimeout = expirationTime =>{\r\n    return dispatch =>{\r\n        setTimeout(()=>{\r\n            dispatch(logout());\r\n        },+expirationTime*1000)\r\n    };\r\n};\r\n\r\nexport const logout = () =>{\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('expirationDate');\r\n    localStorage.removeItem('userId');\r\n    return {\r\n        type:actionTypes.AUTH_LOGOUT\r\n    };\r\n};\r\n\r\nexport const setAuthRedirectPath = (path) =>{\r\n    return {\r\n        type:actionTypes.SET_AUTH_REDIRECT_PATH,\r\n        path:path\r\n    }\r\n}\r\n\r\nexport const authCheckState = () =>{\r\n    return dispatch =>{\r\n        const token = localStorage.getItem('token');\r\n        if(!token){\r\n            dispatch(logout());\r\n        }else{\r\n            const expirationDate = new Date(localStorage.getItem('expirationDate'));\r\n            if(expirationDate >new Date()){\r\n                dispatch(authSuccess(token, ));\r\n            }else{\r\n                dispatch(logout());\r\n            }\r\n            \r\n        }\r\n    };\r\n}\r\n\r\nexport const auth =(email,password,isSignup) =>{\r\n    return dispatch =>{\r\n        dispatch(authStart());\r\n        const authData={\r\n            email:email,\r\n            password:password,\r\n            returnSecureToken:true,\r\n        }\r\n        let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyB82NNpMRmyiLHdvtZMp5IeuzpwZHibc9w';\r\n        if(!isSignup){\r\n            url ='https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyB82NNpMRmyiLHdvtZMp5IeuzpwZHibc9w';\r\n        }\r\n        axios.post(url,authData).then(response =>{\r\n            console.log(response.data);\r\n            const expirationDate = new Date(new Date().getTime()+response.data.expiresIn*1000);\r\n            localStorage.setItem('token',response.data.idToken);\r\n            localStorage.setItem('expirationDate',expirationDate);\r\n            localStorage.setItem('userId',response.data.localId);\r\n            dispatch(authSuccess(response.data.idToken,response.data.localId));\r\n            dispatch(checkAuthTimeout(response.data.expiresIn));\r\n        }).catch(err =>\r\n            dispatch(authFail(err.response.data.error))\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}