{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Development Projects\\\\burger_app\\\\src\\\\containers\\\\Checkout\\\\ContactData\\\\ContactData.js\";\nimport React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-order';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport { connect } from 'react-redux';\nimport * as actions from '../../../store/actions/index';\nimport { updateObject } from '../../../shared/utility';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'ZIP CODE'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6,\n            maxLength: 6\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your E-Mail'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: 'fastest',\n          validation: {},\n          valid: true\n        }\n      },\n      formIsValid: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      this.setState({\n        loading: true\n      });\n      let formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier];\n      }\n\n      const order = {\n        ingredients: this.props.ings,\n        price: this.props.price,\n        orderData: formData,\n        userId: this.props.userId\n      };\n      console.log(order);\n      this.props.onOrderBurger(order, this.props.token);\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\n        value: event.target.value,\n        valid: this.checkValidity(updatedFormElement.value, updatedFormElement.validation),\n        touched: true\n      });\n      const updatedOrderForm = updateObject(this.state.orderForm, {}); //  const updatedFormElement = {...updatedOrderForm[inputIdentifier]};\n      //  updatedFormElement.value = event.target.value;\n      //  updatedFormElement.valid = this.checkValidity(updatedFormElement.value,updatedFormElement.validation);\n      //  updatedFormElement.touched = true;\n\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n      }\n\n      console.log(formIsValid);\n      this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      if (isValid) isValid = value.trim() !== '';\n    }\n\n    if (rules.minLength) {\n      if (isValid) isValid = value.length >= rules.minLength;\n    }\n\n    if (rules.maxLength) {\n      if (isValid) isValid = value.length <= rules.maxLength;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    console.log(this.state.formIsValid);\n    let form = /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }\n    }, formElementArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      invalid: !formElement.config.valid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Success\",\n      clicked: this.orderHandler,\n      disabled: !this.state.formIsValid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }\n    }, \"ORDER\"));\n\n    if (this.props.loading) {\n      form = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 19\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.ContactData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }\n    }, \"Enter your Contact Data\"), form);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","map":{"version":3,"sources":["D:/Web Development Projects/burger_app/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","Button","classes","axios","Spinner","Input","withErrorHandler","connect","actions","updateObject","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","setState","loading","formData","formElementIdentifier","order","ingredients","props","ings","price","orderData","userId","console","log","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","target","checkValidity","updatedOrderForm","rules","isValid","trim","length","render","formElementArray","key","push","id","config","form","map","formElement","mapStateToProps","burgerBuilder","totalPrice","auth","mapDispatchToProps","dispatch","purchaseBurger"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport classes from './ContactData.module.css';\r\nimport axios from '../../../axios-order';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../../../store/actions/index';\r\nimport {updateObject} from '../../../shared/utility';\r\nclass ContactData extends Component{\r\n    state={\r\n        orderForm:{\r\n            name:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'Your Name'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            street:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'Street'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            zipCode:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'ZIP CODE'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true,\r\n                    minLength:6,\r\n                    maxLength:6\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            country:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'Country'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            email:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'email',\r\n                    placeholder:'Your E-Mail'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            deliveryMethod:{\r\n                elementType:'select',\r\n                elementConfig:{\r\n                    options:[\r\n                        {value:'fastest',displayValue:'Fastest'},\r\n                        {value:'cheapest',displayValue:'Cheapest'},]\r\n                },\r\n                value:'fastest',\r\n                validation:{},\r\n                valid:true\r\n            }\r\n        },\r\n            formIsValid:false\r\n    }\r\n    orderHandler = (event)=>{\r\n        event.preventDefault();\r\n        this.setState({loading:true});\r\n        let formData = {};\r\n        for(let formElementIdentifier in this.state.orderForm){\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier];\r\n        }\r\n        const order ={\r\n            ingredients:this.props.ings,\r\n            price:this.props.price,\r\n            orderData:formData,\r\n            userId:this.props.userId  \r\n        };\r\n        console.log(order);\r\n        this.props.onOrderBurger(order,this.props.token);\r\n    }\r\n\r\n    checkValidity(value,rules){\r\n        let isValid = true;\r\n        if(!rules){\r\n            return true;\r\n        }\r\n        if(rules.required){\r\n            if(isValid)\r\n                isValid = value.trim() !== '';\r\n        }\r\n        if(rules.minLength){\r\n            if(isValid)\r\n                isValid = value.length >= rules.minLength;\r\n        }\r\n        if(rules.maxLength){\r\n            if(isValid)\r\n                isValid = value.length <= rules.maxLength;\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    inputChangedHandler = (event,inputIdentifier)=>{\r\n         \r\n         const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier],{\r\n            value: event.target.value,\r\n            valid:this.checkValidity(updatedFormElement.value,updatedFormElement.validation),\r\n            touched:true\r\n         });\r\n         const updatedOrderForm = updateObject(this.state.orderForm,{\r\n             \r\n         })\r\n        //  const updatedFormElement = {...updatedOrderForm[inputIdentifier]};\r\n        //  updatedFormElement.value = event.target.value;\r\n        //  updatedFormElement.valid = this.checkValidity(updatedFormElement.value,updatedFormElement.validation);\r\n        //  updatedFormElement.touched = true;\r\n         updatedOrderForm[inputIdentifier] = updatedFormElement;\r\n         let formIsValid = true;\r\n         for(let inputIdentifier in updatedOrderForm){\r\n             formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n         }\r\n         console.log(formIsValid);\r\n         this.setState({orderForm:updatedOrderForm,formIsValid:formIsValid});\r\n    }\r\n\r\n    render(){\r\n        const formElementArray = [];\r\n        for(let key in this.state.orderForm){\r\n            formElementArray.push({\r\n                id:key,\r\n                config:this.state.orderForm[key]\r\n            });\r\n        }\r\n        console.log(this.state.formIsValid);\r\n        let form = (\r\n        <form>\r\n            {formElementArray.map(formElement =>(\r\n                <Input \r\n                    key={formElement.id}\r\n                    elementType={formElement.config.elementType}\r\n                    elementConfig={formElement.config.elementConfig}\r\n                    value={formElement.config.value} \r\n                    shouldValidate={formElement.config.validation}\r\n                    touched={formElement.config.touched}\r\n                    changed={(event)=>this.inputChangedHandler(event,formElement.id)}\r\n                    invalid={!formElement.config.valid}/>\r\n            ))}\r\n            <Button btnType=\"Success\" clicked={this.orderHandler} disabled={!this.state.formIsValid}>ORDER</Button>\r\n        </form>\r\n        );\r\n        if(this.props.loading){\r\n            form =<Spinner />\r\n        }\r\n        return(\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    };\r\n}   \r\n\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        ings:state.burgerBuilder.ingredients,\r\n        price:state.burgerBuilder.totalPrice,\r\n        loading:state.order.loading,\r\n        token:state.auth.token,\r\n        userId:state.auth.userId\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n    return {\r\n        onOrderBurger: (orderData,token) => dispatch(actions.purchaseBurger(orderData,token))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(ContactData,axios));"]},"metadata":{},"sourceType":"module"}