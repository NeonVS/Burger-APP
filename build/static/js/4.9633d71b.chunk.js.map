{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetRedirectPath","formElementArray","id","config","form","formElement","configvalidation","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","onSubmit","btnType","clicked","Component","withRouter","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/4.9633d71b.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) =>{\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if(props.invalid && props.shouldValidate &&props.touched){\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch(props.elementType){\r\n        case ('input'):\r\n            inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed}/>;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed}/>;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (\r\n                <select className={inputClasses.join(' ')} value={props.value} onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option =>(\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    ))}\r\n                </select>);\r\n            break;\r\n        default:\r\n            inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value}/>;\r\n    }\r\n    return(\r\n    <div className={classes.Input}>\r\n        <label className={classes.Label}>{props.label}</label>\r\n        {inputElement}\r\n    </div>\r\n    );\r\n    };\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2e6Yg\",\"Label\":\"Input_Label__1UNe_\",\"InputElement\":\"Input_InputElement__1OFDA\",\"Invalid\":\"Input_Invalid__2mVwL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__17evZ\"};","import React, {Component} from 'react';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport classes from './Auth.module.css';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport * as actions from '../../store/actions/index';\r\nimport {Redirect,withRouter} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {checkValidity} from '../../shared/utility';\r\nclass Auth extends Component {\r\n    state = {\r\n        controls:{\r\n            email:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'email',\r\n                    placeholder:'Your Mail'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true,\r\n                    isEmail:true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            password:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'password',\r\n                    placeholder:'Password'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true,\r\n                    minLength:6\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            }\r\n        },\r\n        isSignup:true\r\n    }\r\n\r\n\r\n    inputChangedHandler = (event,controlName) =>{\r\n        const updatedControls = {\r\n            ...this.state.controls,\r\n            [controlName]: {\r\n                ...this.state.controls[controlName],\r\n                value:event.target.value,\r\n                valid:checkValidity(event.target.value,this.state.controls[controlName].validation),\r\n                touched:true\r\n            }\r\n        };\r\n        this.setState({controls:updatedControls});\r\n    }\r\n\r\n    submitHandler = (event)=>{\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value,this.state.controls.password.value,this.state.isSignup)\r\n    }\r\n\r\n    switchAuthModeHandler = () =>{\r\n        this.setState(prevState =>{\r\n            return {isSignup: !prevState.isSignup};\r\n        });\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(!this.props.buildingBurger && this.props.authRedirectPath !== '/'){\r\n            this.props.onSetRedirectPath();\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const formElementArray = [];\r\n        for(let key in this.state.controls){\r\n            formElementArray.push({\r\n                id:key,\r\n                config:this.state.controls[key]\r\n            });\r\n        }\r\n        let form = formElementArray.map(formElement => (\r\n            <Input  \r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value} \r\n                shouldValidate={formElement.configvalidation}\r\n                touched={formElement.config.touched}\r\n                changed={(event)=>this.inputChangedHandler(event,formElement.id)}\r\n                invalid={!formElement.config.valid}/>\r\n        ));\r\n        if(this.props.loading){\r\n            form=<Spinner />;\r\n        }\r\n\r\n        let errorMessage = null;\r\n        if(this.props.error){\r\n            errorMessage=(\r\n                <p>{this.props.error.message}</p>\r\n            );\r\n        }\r\n        let authRedirect = null;\r\n        if(this.props.isAuthenticated){\r\n            authRedirect = <Redirect to={this.props.authRedirectPath }/>\r\n        }\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n                <Button clicked={this.switchAuthModeHandler} btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGNIN':'SIGNUP'}</Button>\r\n            </div>\r\n        );\r\n    };\r\n}\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        loading:state.auth.loading,\r\n        error:state.auth.error,\r\n        isAuthenticated :state.auth.token !=null,\r\n        buildingBurger:state.burgerBuilder.building,\r\n        authRedirectPath:state.auth.authRedirectPath\r\n    }\r\n};\r\nconst mapDispatchToProps = dispatch =>{\r\n    return {\r\n        onAuth:(email,password,isSignup)=>dispatch(actions.auth(email,password,isSignup)),\r\n        onSetRedirectPath:() =>dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps,mapDispatchToProps)(Auth));"],"sourceRoot":""}