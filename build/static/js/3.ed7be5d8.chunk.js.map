{"version":3,"sources":["containers/Checkout/ContactData/ContactData.js","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css"],"names":["ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","setState","loading","formData","formElementIdentifier","order","ingredients","props","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","formElementArray","key","this","push","id","config","form","map","formElement","Input","shouldValidate","changed","invalid","Button","btnType","clicked","disabled","Spinner","className","classes","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","checkoutSummary","CheckoutSummary","style","width","margin","Burger","checkoutCancelled","checkoutContinued","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","purchasedRedirect","summary","to","purchased","path","match","component","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","label","module","exports"],"mappings":"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","file":"static/js/3.ed7be5d8.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport classes from './ContactData.module.css';\r\nimport axios from '../../../axios-order';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../../../store/actions/index';\r\nimport {updateObject,checkValidity} from '../../../shared/utility';\r\nclass ContactData extends Component{\r\n    state={\r\n        orderForm:{\r\n            name:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'Your Name'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            street:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'Street'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            zipCode:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'ZIP CODE'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true,\r\n                    minLength:6,\r\n                    maxLength:6\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            country:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'Country'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            email:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'email',\r\n                    placeholder:'Your E-Mail'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            deliveryMethod:{\r\n                elementType:'select',\r\n                elementConfig:{\r\n                    options:[\r\n                        {value:'fastest',displayValue:'Fastest'},\r\n                        {value:'cheapest',displayValue:'Cheapest'},]\r\n                },\r\n                value:'fastest',\r\n                validation:{},\r\n                valid:true\r\n            }\r\n        },\r\n            formIsValid:false\r\n    }\r\n    orderHandler = (event)=>{\r\n        event.preventDefault();\r\n        this.setState({loading:true});\r\n        let formData = {};\r\n        for(let formElementIdentifier in this.state.orderForm){\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier];\r\n        }\r\n        const order ={\r\n            ingredients:this.props.ings,\r\n            price:this.props.price,\r\n            orderData:formData,\r\n            userId:this.props.userId  \r\n        };\r\n        this.props.onOrderBurger(order,this.props.token);\r\n    }\r\n\r\n    inputChangedHandler = (event,inputIdentifier)=>{\r\n         \r\n         const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier],{\r\n            value: event.target.value,\r\n            valid:checkValidity(event.target.value,this.state.orderForm[inputIdentifier].validation),\r\n            touched:true\r\n         });\r\n         const updatedOrderForm = updateObject(this.state.orderForm,{\r\n             [inputIdentifier]:updatedFormElement\r\n         })\r\n        //  const updatedFormElement = {...updatedOrderForm[inputIdentifier]};\r\n        //  updatedFormElement.value = event.target.value;\r\n        //  updatedFormElement.valid = this.checkValidity(updatedFormElement.value,updatedFormElement.validation);\r\n        //  updatedFormElement.touched = true;\r\n        //updatedOrderForm[inputIdentifier] = updatedFormElement;\r\n         let formIsValid = true;\r\n         for(let inputIdentifier in updatedOrderForm){\r\n             formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n         }\r\n         this.setState({orderForm:updatedOrderForm,formIsValid:formIsValid});\r\n    }\r\n\r\n    render(){\r\n        const formElementArray = [];\r\n        for(let key in this.state.orderForm){\r\n            formElementArray.push({\r\n                id:key,\r\n                config:this.state.orderForm[key]\r\n            });\r\n        }\r\n        let form = (\r\n        <form>\r\n            {formElementArray.map(formElement =>(\r\n                <Input \r\n                    key={formElement.id}\r\n                    elementType={formElement.config.elementType}\r\n                    elementConfig={formElement.config.elementConfig}\r\n                    value={formElement.config.value} \r\n                    shouldValidate={formElement.config.validation}\r\n                    touched={formElement.config.touched}\r\n                    changed={(event)=>this.inputChangedHandler(event,formElement.id)}\r\n                    invalid={!formElement.config.valid}/>\r\n            ))}\r\n            <Button btnType=\"Success\" clicked={this.orderHandler} disabled={!this.state.formIsValid}>ORDER</Button>\r\n        </form>\r\n        );\r\n        if(this.props.loading){\r\n            form =<Spinner />\r\n        }\r\n        return(\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    };\r\n}   \r\n\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        ings:state.burgerBuilder.ingredients,\r\n        price:state.burgerBuilder.totalPrice,\r\n        loading:state.order.loading,\r\n        token:state.auth.token,\r\n        userId:state.auth.userId\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n    return {\r\n        onOrderBurger: (orderData,token) => dispatch(actions.purchaseBurger(orderData,token))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(ContactData,axios));","import React from 'react';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport classes from './CheckoutSummary.module.css';\r\n\r\nconst checkoutSummary = (props) =>{\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>Enjoy the best burger you can ever taste!</h1>\r\n            <div style={{width:'100%',margin:'auto'}}>\r\n                <Burger ingredients={props.ingredients}/>\r\n            </div>\r\n            <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>CANCEL</Button>\r\n            <Button btnType=\"Success\" clicked={props.checkoutContinued}>CONTINUE</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default checkoutSummary;","import React,{Component} from 'react';\r\nimport {Route,Redirect} from 'react-router-dom';\r\nimport ContactData from './ContactData/ContactData'; \r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport {connect} from 'react-redux';\r\nclass Checkout extends Component {\r\n    // state = {\r\n    //     ingredients:null,\r\n    //     totalPrice:0\r\n    // }\r\n    checkoutCancelledHandler = () =>{\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    checkoutContinuedHandler = () =>{\r\n        this.props.history.replace('/checkout/contact-data');\r\n    }\r\n    // componentWillMount(){\r\n    //     const query = new URLSearchParams(this.props.location.search);\r\n    //     const ingredients = {};\r\n    //     let price = 0;\r\n    //     for(let param of query.entries()){\r\n    //         if(param[0] === 'price'){\r\n    //             price = param[1];\r\n    //         }else{\r\n    //             ingredients[param[0]] = +param[1];\r\n    //         }\r\n    //     }\r\n    //     this.setState({ingredients:ingredients});\r\n    //     this.setState({totalPrice:price});\r\n    // }\r\n\r\n    \r\n\r\n    render(){\r\n        let summary = <Redirect to=\"/\"/>;\r\n        let purchasedRedirect;\r\n        if(this.props.ings){\r\n            purchasedRedirect = this.props.purchased?<Redirect to=\"/\" /> : null;\r\n        }\r\n        if(this.props.ings){\r\n            summary=(\r\n                <div>\r\n                {purchasedRedirect}\r\n                <CheckoutSummary ingredients={this.props.ings} checkoutCancelled={this.checkoutCancelledHandler} checkoutContinued={this.checkoutContinuedHandler}/>\r\n                <Route \r\n                path={this.props.match.path+'/contact-data'} component={ContactData} />\r\n                </div>\r\n            );\r\n        }\r\n        return(\r\n            summary\r\n        );\r\n    };\r\n}\r\n\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        ings:state.burgerBuilder.ingredients,\r\n        purchased:state.order.purchased\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) =>{\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if(props.invalid && props.shouldValidate &&props.touched){\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch(props.elementType){\r\n        case ('input'):\r\n            inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed}/>;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed}/>;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (\r\n                <select className={inputClasses.join(' ')} value={props.value} onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option =>(\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    ))}\r\n                </select>);\r\n            break;\r\n        default:\r\n            inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value}/>;\r\n    }\r\n    return(\r\n    <div className={classes.Input}>\r\n        <label className={classes.Label}>{props.label}</label>\r\n        {inputElement}\r\n    </div>\r\n    );\r\n    };\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2e6Yg\",\"Label\":\"Input_Label__1UNe_\",\"InputElement\":\"Input_InputElement__1OFDA\",\"Invalid\":\"Input_Invalid__2mVwL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__2NdLM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__XBQhF\"};"],"sourceRoot":""}